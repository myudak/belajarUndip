from manim import *

Tex.set_default(color=TEAL)


class rank(Scene):
    def construct(self):

        title = Text("Rank of a Matrix").set_color(TEAL)
        r_def = Text(
            "Maximum number of Linearly Independent Rows or Columns in a matrix \n It is the dimension of the vector space generated by its rows or columns",
            t2c={"Linearly Independent": PINK},
            font_size=28,
            line_spacing=0.9,
        )

        rules = Text(
            " 1. The rank of a zero matrix is always zero \n 2. The rank of an identity matrix is equal to its order \n 3. A matrix is singular if its rank is less than its order \n 4. The rank of a matrix cannot exceed the smaller of the number of rows or columns",
            font_size=25,
            line_spacing=1,
        )

        m0 = Matrix([["a", "b", "c"], ["d", "e", "f"]])

        m01 = Matrix([["a"], ["d"]])
        m02 = Matrix([["b"], ["e"]]).next_to(m01)
        m03 = Matrix([["c"], ["f"]]).next_to(m02)

        m04 = Matrix([["a", "b", "c"]])
        m05 = Matrix([["d", "e", "f"]]).next_to(m04, DOWN)

        m0.get_brackets().set_color(YELLOW)
        m01.get_brackets().set_color(YELLOW)
        m02.get_brackets().set_color(YELLOW)
        m03.get_brackets().set_color(YELLOW)
        m04.get_brackets().set_color(YELLOW)
        m05.get_brackets().set_color(YELLOW)

        g1 = Group(m01, m02, m03).next_to(m0, DOWN, 0.8)
        g2 = Group(m04, m05).next_to(m0, RIGHT, 0.8)

        self.play(Write(title))
        self.play(
            title.animate.move_to(UP * 3.5),
        )
        r_def.next_to(title, DOWN)
        rules.next_to(r_def, DOWN, 0.5)
        self.play(Write(r_def))
        self.play(FadeIn(rules))
        self.wait()
        self.play(FadeOut(rules))
        self.play(Create(m0))
        self.play(TransformFromCopy(m0, g1))
        self.play(TransformFromCopy(m0, g2))
        self.wait()
        self.play(FadeOut(g1), FadeOut(g2), FadeOut(r_def), FadeOut(m0))


class example_1(Scene):
    def construct(self):
        title = Text("Rank of a Matrix").set_color(TEAL).move_to(UP * 3.5)

        m0 = Matrix([[2, 2], [1, 1]])
        m1 = Matrix([[2, 0], [1, 0]]).move_to([3, 2, 0])

        m01 = m0.copy()
        m01.move_to([-3, -0.5, 0])
        m11 = Matrix([[0, 0], [1, 1]]).move_to([3, -0.5, 0])

        m20 = Matrix([[1, 2], [3, 4]]).move_to([-3, 2, 0])
        m21 = Matrix([[1, 2], [1, 0]]).move_to(m1)

        matrices = [m0, m1, m01, m11, m20, m21]
        for m in matrices:
            m.get_brackets().set_color(YELLOW)

        arrow_1 = Arrow(
            start=[-1.7, 2, 0], end=[1.7, 2, 0], color=PINK, tip_shape=StealthTip
        )
        arrow_2 = Arrow(
            start=[-1.7, -0.5, 0], end=[1.7, -0.5, 0], color=PINK, tip_shape=StealthTip
        )

        eq1 = MathTex(r"C_2 - C_1").set_color(TEAL).next_to(arrow_1, DOWN)
        eq2 = MathTex(r"R_1 - 2 \cdot R_2").set_color(TEAL).next_to(arrow_2, DOWN)
        eq3 = MathTex(r"R_2 - 2 \cdot R_1").set_color(TEAL).next_to(arrow_1, DOWN)

        self.add(title)
        self.play(Create(m0))
        self.play(m0.animate.move_to([-3, 2, 0]))
        self.play(Create(arrow_1), Write(eq1))
        self.play(Create(m1))
        self.wait(2)
        self.play(TransformFromCopy(m0, m01))
        self.play(Create(arrow_2), Write(eq2))
        self.play(Create(m11))
        self.wait(2)
        self.play(
            LaggedStart(
                Transform(m0, m20), Transform(m1, m21), Transform(eq1, eq3), run_time=2
            )
        )
        self.wait(4)
        g = VGroup(m0, m1, m01, m11, arrow_1, arrow_2, eq1, eq2)
        self.play(Uncreate(g))
        self.wait()


class example_2(Scene):
    def construct(self):
        title = Text("Rank of a Matrix").set_color(TEAL).move_to(UP * 3.5)

        m01 = Matrix([[1, 2, 2], [1, 3, 4], [0, 1, 2]])
        m02 = Matrix([[1, 2, 2], [0, 1, 2], [0, 1, 2]]).move_to([4, 1.5, 0])
        m03 = Matrix([[1, 2, 2], [0, 1, 2], [0, 0, 0]]).move_to([-4, -2.5, 0])
        m04 = Matrix([[1, 1, 0], [0, 1, 2], [0, 0, 0]]).move_to([4, -2.5, 0])

        matrices = [m01, m02, m03, m04]
        for m in matrices:
            m.get_brackets().set_color(YELLOW)

        eq1 = MathTex(r"R_2 - R_1").set_color(TEAL)
        eq2 = MathTex(r"R_3 - R_2").set_color(TEAL)
        eq3 = MathTex(r"R_1 - R_2").set_color(TEAL)

        arrow_1 = LabeledArrow(
            start=[-1.7, 1.5, 0],
            end=[1.7, 1.5, 0],
            color=PINK,
            tip_shape=StealthTip,
            label=eq1,
        )
        arrow_2 = LabeledArrow(
            start=[1.7, 0.5, 0],
            end=[-1.7, -1.5, 0],
            color=PINK,
            tip_shape=StealthTip,
            label=eq2,
        )
        arrow_3 = LabeledArrow(
            start=[-1.7, -2.5, 0],
            end=[1.7, -2.5, 0],
            color=PINK,
            tip_shape=StealthTip,
            label=eq3,
        )

        self.add(title)
        self.play(Create(m01))
        self.play(m01.animate.move_to([-4, 1.5, 0]))
        self.play(GrowArrow(arrow_1))
        self.play(Create(m02))
        self.wait(2)
        b1 = SurroundingRectangle(m02.get_rows()[1], color=YELLOW)
        b2 = SurroundingRectangle(m02.get_rows()[2], color=YELLOW)
        self.play(Create(b1))
        self.play(Create(b2))
        self.play(FadeOut(b1), FadeOut(b2))
        self.wait(1)
        self.play(TransformFromCopy(m02, m03), GrowArrow(arrow_2))
        self.wait(2)
        self.play(TransformFromCopy(m03, m04), GrowArrow(arrow_3))
        self.wait(3)
        g = VGroup(m01, m02, m03, m04, arrow_1, arrow_2, arrow_3, eq1, eq2, eq3)
        self.play(Uncreate(g))
        self.play(title.animate.move_to(ORIGIN))
        self.wait()
